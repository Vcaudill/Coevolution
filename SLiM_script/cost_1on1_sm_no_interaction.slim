initialize() {
	
	initializeSLiMModelType("nonWF");
	initializeSLiMOptions(dimensionality="xy");
	initializeTreeSeq();
	// setSeed(seed);
	sigma_i = 1;
	recomb = 1e-8;
	sigma_in = 0.5; 
	
	// Testing factors 	
// 	defineConstant("mu_rate", 1e-8); 
// 	defineConstant("snake_mu_rate", 1e-8); // snake mu	
// 	defineConstant("newt_mu_rate", 1e-8); // newt mu
// 	defineConstant("snake_mu_effect_sd", 0.5);
// 	defineConstant("newt_mu_effect_sd", 0.5);
// 	defineConstant("msprime_file", "test_data/test_1000_su_1e-10_nu_1e-10_sue_0.1_nue_0.1_.init.trees");
// 	defineConstant("grid_val", 5);
// 	defineConstant("outpath", "test_data/");
// 	defineConstant("seed", getSeed()); // "seed"
// 	defineConstant("NUMGENS", 100000); // end generation
// 	defineConstant("tag", "test"); // label
// 	defineConstant("rep", "test"); // which repicate
// 	defineConstant("interaction_rate", 0.05);  
	
	total_mut_rate = newt_mu_rate + snake_mu_rate;
	
	defineConstant("sigma_M", 0.33); // the meeting interaction term
	defineConstant("K", 1);  // carrying-capacity per unit square (roughly)
	defineConstant("SD", sigma_in);  // sigma_D, the dispersal distance
	defineConstant("SI", sigma_in);  // sigma_I, the spatial interaction distance
	defineConstant("surs", sigma_in);  // surs, the surviver distance
	defineConstant("SM", SI);  // sigma_M, the mate choice distance
	defineConstant("L", 4);    // mean lifetime at stationarity 
	defineConstant("W", 35.0);  // width of the simulated area
	defineConstant("H", 4);  // height of the simulated area 
	defineConstant("G", 1e8);  // genome length
	defineConstant("FECUN", 1/(L)); // mean fecundity
	defineConstant("RHO", FECUN/((1+FECUN) * K)); // constant in spatial competition function
	defineConstant("PE", 0.1); // Positive effect snake gets when eating a newt
	defineConstant("w", 10); // the width of the logistic curve, change in phyenotype at any state
	defineConstant("c", 0.0); // is the mean change 
	defineConstant("setCOST", 100); // phenotype cost for newts and snakes
	
	
	initializeMutationType("m1", 0.5, "n", 0, newt_mu_effect_sd);
	initializeMutationType("m2", 0.5, "n", 0, snake_mu_effect_sd);
	initializeGenomicElementType("g1", c(m1, m2), c(newt_mu_rate, snake_mu_rate)); // mutation proportions 
	initializeGenomicElement(g1, 0, G-1);
	initializeMutationRate(total_mut_rate);
	initializeRecombinationRate(recomb);
	
	// newts
	initializeInteractionType(1, "xy", reciprocal=T, maxDistance=SI * 3); 
	i1.setInteractionFunction("n", 1.0/(2*PI*SI^2), SI);
	
	// snakes
	initializeInteractionType(2, "xy", reciprocal=T, maxDistance=SM * 3);
	i2.setInteractionFunction("n", 1.0/(2*PI*SM^2), SM);

}

fitness(m1) { return 1.0; }
fitness(m2) { return 1.0; }

// / FUNCTIONS for log file

function (float)summarize_ind_num(o<Subpopulation>$ subpop, i$ grid_res_value, i$ index, s$ sanity)
{
	// counting the number of individuals by area
	grid_res= c(grid_res_value*H,grid_res_value);
	sum_ind=summarizeIndividuals(subpop.individuals, grid_res, subpop.spatialBounds, operation="if (length(individuals)>0)length(individuals); else length(individuals); ", empty=0.0);
	return sum_ind[index];
}

function (float)summarize_mean_pheno(o<Subpopulation>$ subpop, i$ grid_res_value, i$ index, s$ sanity)
{
	// mean phenotype by area
	grid_res= c(grid_res_value*H,grid_res_value);
	sum_ind=summarizeIndividuals(subpop.individuals, grid_res, subpop.spatialBounds, operation="if (length(individuals)>0)mean(individuals.getValue('pheno')); else length(individuals); ", empty=NAN);
	return sum_ind[index];
}

function (float)summarize_sd_pheno(o<Subpopulation>$ subpop, i$ grid_res_value, i$ index, s$ sanity)
{
	// sd phenotype by area
	grid_res= c(grid_res_value*H,grid_res_value);
	sum_ind=summarizeIndividuals(subpop.individuals, grid_res, subpop.spatialBounds, operation="if (length(individuals)>1)sd(individuals.getValue('pheno')); else NAN; ", empty=NAN);
	return sum_ind[index];
}

function (float)summarize_max_pheno(o<Subpopulation>$ subpop, i$ grid_res_value, i$ index, s$ sanity)
{
	// max phenotype by area
	grid_res= c(grid_res_value*H,grid_res_value);
	sum_ind=summarizeIndividuals(subpop.individuals, grid_res, subpop.spatialBounds, operation="if (length(individuals)>0)max(individuals.getValue('pheno')); else length(individuals); ", empty=NAN);
	return sum_ind[index];
}

function (float)summarize_min_pheno(o<Subpopulation>$ subpop, i$ grid_res_value, i$ index, s$ sanity)
{
	// min phenotype by area
	grid_res= c(grid_res_value*H,grid_res_value);
	sum_ind=summarizeIndividuals(subpop.individuals, grid_res, subpop.spatialBounds, operation="if (length(individuals)>0)min(individuals.getValue('pheno')); else length(individuals); ", empty=NAN);
	return sum_ind[index];
}

reproduction(p1) {// newts
	// choose our nearest neighbor as a mate, within the max distance 
	mate = i2.drawByStrength(individual, 1);
	if (mate.size()) {
		nOff = rpois(1, FECUN);
		for (i in seqLen(nOff)) {
			pos = individual.spatialPosition + rnorm(2, 0, SD); // dispersal
			if (p1.pointInBounds(pos)) {
				offspring = subpop.addCrossed(individual, mate);
				offspring.setSpatialPosition(p1.pointReflected(pos));
				offspring.setValue("snakes_killed",0);
				offspring.setValue("pheno",exp(offspring.sumOfMutationsOfType(m1)/10)); 
			}
		}
	}
	return;
}

reproduction(p0) {// snakes
	// choose our nearest neighbor as a mate, within the max distance
	mate = i2.drawByStrength(individual, 1);
	if (mate.size()) {
		nOff = rpois(1, FECUN);
		for (i in seqLen(nOff)) {
			pos = individual.spatialPosition + rnorm(2, 0, SD); // dispersal
			if (p0.pointInBounds(pos)) {
				offspring = subpop.addCrossed(individual, mate);
				offspring.setSpatialPosition(p0.pointReflected(pos));
				offspring.setValue("newts_killed",0);
				offspring.setValue("pheno",exp(offspring.sumOfMutationsOfType(m2)/10)); 
			}
		}
	}
	return;
}

1 early() {
	sim.rescheduleScriptBlock(s99, generations=NUMGENS);
	sim.readFromPopulationFile(msprime_file);
	
	p1.setSpatialBounds(c(0, 0, W, W*H)); // newt
	p0.setSpatialBounds(c(0, 0, W, W*H)); // snake
	// random initial positions
	for (ind in p1.individuals) { // newt
		ind.setSpatialPosition(p1.pointUniform());
		ind.setValue("snakes_killed",0);
		ind.setValue("pheno",exp(ind.sumOfMutationsOfType(m1)/10)); 
	}
	for (ind in p0.individuals) { // snake
		ind.setSpatialPosition(p0.pointUniform());
		ind.setValue("newts_killed",0);
		ind.setValue("pheno",exp(ind.sumOfMutationsOfType(m2)/10)); 
	
	}
	i1.evaluate();
}

// competition within and between populations
early() {

	i1.evaluate(p1);
	i2.evaluate(p0);
	inds_n = p1.individuals;
	inds_s = p0.individuals;
	
	newt_competition = i1.totalOfNeighborStrengths(inds_n); // find number of newt neighbors for each newt
	snake_competition = i2.totalOfNeighborStrengths(inds_s);// find number of snake neighbors for each snake
	
	// construct phenotypes and fitness effects from QTLs 
	inds_n.z = inds_n.getValue('pheno');// phenotypes_n
	inds_s.z = inds_s.getValue('pheno'); // phenotypes_s
	
	cost_n = exp(-(inds_n.getValue('pheno')/setCOST)^2);
	cost_s = exp(-(inds_s.getValue('pheno')/setCOST)^2);
	inds_n.fitnessScaling = (pmin(0.95, 1/(1 + RHO * newt_competition)))*cost_n;
	inds_s.fitnessScaling = (pmin(0.95, 1/(1 + RHO * snake_competition)))*cost_s;
	
	// avoid edge effects
	inds_n.fitnessScaling = inds_n.fitnessScaling * pmin(sqrt(inds_n.x/SI), 1.0) * pmin(sqrt(inds_n.y/SI), 1.0) * pmin(sqrt((W - inds_n.x)/SI), 1.0) * pmin(sqrt((W*H - inds_n.y)/SI), 1.0); 
	inds_s.fitnessScaling = inds_s.fitnessScaling * pmin(sqrt(inds_s.x/SI), 1.0) * pmin(sqrt(inds_s.y/SI), 1.0) * pmin(sqrt((W - inds_s.x)/SI), 1.0) * pmin(sqrt((W*H - inds_s.y)/SI), 1.0);
	

	bounds = p0.spatialBounds;
	// find number of newts near each snake and choose a random newt from nearby for a potental interaction
	snake_found_newt = 0;
	newt_found = 0;
	snake_deaths = 0;
	newt_deaths = 0;
	for (ind_snake in p0.individuals){
		mPoint = c(ind_snake.x,ind_snake.y);
		newtNeighbors = i1.nearestNeighborsOfPoint(p1, mPoint, count=1000000);
		if (length(newtNeighbors) > 0){ 
			snake_found_newt = snake_found_newt + 1;
			// List of which newts the snake will try to eat. It will take a uniform distribution and a probablity of interacting
			distance = i1.distanceToPoint(newtNeighbors, mPoint);// vector of distances 
			probablity = interaction_rate*exp(-(distance^2)/(2*(surs^2))); // curve of the interaction based on the distance of the newt
			
			newt_meet_snake = newtNeighbors[runif(length(newtNeighbors)) < probablity] ; // list of newts snake will try to eat
			// loop through one newt at a time and see the outcome of the interaction which is dependent on phenotypes (check to make sure newt is still alive)
			for(ind_newt in newt_meet_snake){
				// check to see if newt is alive, newt is not eaten by more than one snake 
				if(ind_newt.fitnessScaling > 0){
					newt_found = newt_found + 1;
					compair_pheno = inds_s.getValue('pheno')[ind_snake.index] - inds_n.getValue('pheno')[ind_newt.index]; // compairing the snake phentype to the newt phenotype 
					prob_of_survive = runif(1); // making the outcome of the interaction random
					survive = runif(1) < prob_of_survive; // did the snake survive? 					
					if(survive==T){
						ind_snake.fitnessScaling = ind_snake.fitnessScaling + PE; // snake with eating newt bonus
						// counting the amount of newts a snake has killed						
						ind_snake.setValue("newts_killed",(ind_snake.getValue("newts_killed")+1));
						ind_newt.fitnessScaling = 0; // newt
						newt_deaths = newt_deaths + 1;
					
					}
					if(survive==F){
						ind_snake.fitnessScaling = 0; // snake 
						// counting the amount of snakes a newt has killed
						ind_newt.setValue("snakes_killed",(ind_newt.getValue("snakes_killed")+1));
						snake_deaths = snake_deaths +1;
						break; // break if snake dies
					}
				
				}
			}
			
			outcome_n = rep(1.0, p1.individualCount);
			outcome_s = rep(1.0, p0.individualCount);
		
		}
	}
	defineGlobal("snake_found_newt", snake_found_newt);
	defineGlobal("newt_found", newt_found);
	defineGlobal("snake_deaths", snake_deaths);
	defineGlobal("newt_deaths", newt_deaths);
}

1: late() {
	// to be ready for mate choice
	i2.evaluate(p1);
	i2.evaluate(p0);
}
// COR calc
2: early() {
	inds_n = p1.individuals;
	inds_s = p0.individuals;
	grid_res = c(grid_val*H, grid_val);

	snake_sum_pheno=summarizeIndividuals(p0.individuals, grid_res, p0.spatialBounds, operation="if (length(individuals)>0)sum(individuals.getValue('pheno')); else length(individuals); ", empty=NAN, perUnitArea=T);
	snake_mean_pheno=summarizeIndividuals(p0.individuals, grid_res, p0.spatialBounds, operation="if (length(individuals)>0)mean(individuals.getValue('pheno')); else length(individuals); ", empty=NAN, perUnitArea=F);
	snake_sum_ind=summarizeIndividuals(p0.individuals, grid_res, p0.spatialBounds, operation="if (length(individuals)>0)length(individuals); else length(individuals); ", empty=0.0, perUnitArea=F);

	
	// newt
	
	newt_sum_pheno=summarizeIndividuals(p1.individuals, grid_res, p0.spatialBounds, operation="if (length(individuals)>0)sum(individuals.getValue('pheno')); else length(individuals); ", empty=NAN, perUnitArea=T);
	newt_mean_pheno=summarizeIndividuals(p1.individuals, grid_res, p0.spatialBounds, operation="if (length(individuals)>0)mean(individuals.getValue('pheno')); else length(individuals); ", empty=NAN, perUnitArea=F);
	newt_sum_ind=summarizeIndividuals(p1.individuals, grid_res, p0.spatialBounds, operation="if (length(individuals)>0)length(individuals); else length(individuals); ", empty=0.0, perUnitArea=F);

	// correlations 	
	newt_mean_pheno=newt_mean_pheno[]; 
	snake_mean_pheno=snake_mean_pheno[];
	u=isFinite(newt_mean_pheno)&isFinite(snake_mean_pheno); 
	mean_newt_pheno_By_mean_snake_pheno = cor(c(newt_mean_pheno[u]), c(snake_mean_pheno[u]));
	num_newts_By_num_snakes = cor(c(newt_sum_ind), c(snake_sum_ind));
	sum_newt_pheno_By_num_snake = cor(c(newt_sum_pheno), c(snake_sum_ind)); //
	sum_snake_pheno_By_num_newt = cor(c(snake_sum_pheno), c(newt_sum_ind));
	sum_newt_pheno_By_num_newt = cor(c(newt_sum_pheno), c(newt_sum_ind)); //
	sum_snake_pheno_By_snake_newt = cor(c(snake_sum_pheno), c(snake_sum_ind));
	
	defineGlobal("mean_newt_pheno_By_mean_snake_pheno", mean_newt_pheno_By_mean_snake_pheno);
	defineGlobal("num_newts_By_num_snakes", num_newts_By_num_snakes);
	defineGlobal("sum_newt_pheno_By_num_snake", sum_newt_pheno_By_num_snake); //
	defineGlobal("sum_snake_pheno_By_num_newt", sum_snake_pheno_By_num_newt);
	defineGlobal("sum_newt_pheno_By_num_newt", sum_newt_pheno_By_num_newt); //
	defineGlobal("sum_snake_pheno_By_snake_newt", sum_snake_pheno_By_snake_newt);

}

1 early() {
	// Log Files
	grid_val_2=grid_val*H;
	defineGlobal("grid_val_2", grid_val_2);
	inds_n = p1.individuals;
	inds_s = p0.individuals;
	beta_n = cor(inds_n.getValue('pheno'), inds_n.fitnessScaling);
	beta_s = cor(inds_s.getValue('pheno'), inds_s.fitnessScaling);
	defineGlobal("beta_n", beta_n);
	defineGlobal("beta_s", beta_s);
	
	// text file
	mytextfile=outpath+tag+"_GA"+grid_val_2+grid_val+"_lit_"+"snake_mu_rate_"+snake_mu_rate+ "_newt_mu_rate_"+newt_mu_rate + "_snake_mu_effect_sd_"+ snake_mu_effect_sd +"_newt_mu_effect_sd_" +newt_mu_effect_sd+"_sigma_"+SD+ "_ID_"+seed + "_interaction_rate_" + interaction_rate + "_cost_" + setCOST + "_rep_"+rep + "_late_" + NUMGENS + "_.text"; // file name

	log_t = sim.createLogFile(mytextfile, logInterval=20);
	log_t.addGeneration();	
	log_t.addCustomColumn("Newt_age","mean(p1.individuals.age);");
	log_t.addCustomColumn("Snake_age","mean(p0.individuals.age);");
	log_t.addCustomColumn("Newt_density","p1.individualCount/W^2;");
	log_t.addCustomColumn("Snake_density","p0.individualCount/W^2;");
	log_t.addCustomColumn("Newt_min_Pheno","min(p1.individuals.getValue('pheno'));");
	log_t.addCustomColumn("Newt_max_Pheno","max(p1.individuals.getValue('pheno'));");
	log_t.addCustomColumn("Newt_mean_Pheno","mean(p1.individuals.getValue('pheno'));");
	log_t.addCustomColumn("Newt_sd_Pheno","sd(p1.individuals.getValue('pheno'));");
	log_t.addCustomColumn("Snake_min_Pheno","min(p0.individuals.getValue('pheno'));");
	log_t.addCustomColumn("Snake_max_Pheno","max(p0.individuals.getValue('pheno'));");
	log_t.addCustomColumn("Snake_mean_Pheno","mean(p0.individuals.getValue('pheno'));");
	log_t.addCustomColumn("Snake_sd_Pheno","sd(p0.individuals.getValue('pheno'));");
	log_t.addCustomColumn("Newt_pop_size","size(p1.individuals);");
	log_t.addCustomColumn("Snake_pop_size","size(p0.individuals);");
	log_t.addCustomColumn("mean_newts_eaten","mean(p0.individuals.getValue('newts_killed')/(p0.individuals.age +1));");
	log_t.addCustomColumn("sd_newts_eaten","sd(p0.individuals.getValue('newts_killed')/(p0.individuals.age +1));");
	log_t.addCustomColumn("mean_snakes_eaten","mean(p1.individuals.getValue('snakes_killed')/(p1.individuals.age +1));");
	log_t.addCustomColumn("sd_snakes_eaten","sd(p1.individuals.getValue('snakes_killed')/(p1.individuals.age +1));");
	log_t.addCustomColumn("beta_n","beta_n;");
	log_t.addCustomColumn("beta_s","beta_s;");
	log_t.addCustomColumn("snake_found_newt","snake_found_newt;");
	log_t.addCustomColumn("newt_found","newt_found;");
	log_t.addCustomColumn("snake_deaths","snake_deaths;");
	log_t.addCustomColumn("newt_deaths","newt_deaths;");
	log_t.addCustomColumn("time","clock();");
	
		
	// grid space file
	mygridfile=outpath+tag+"_GA"+grid_val_2+grid_val+"_grid_"+"snake_mu_rate_"+snake_mu_rate+ "_newt_mu_rate_"+newt_mu_rate + "_snake_mu_effect_sd_"+ snake_mu_effect_sd +"_newt_mu_effect_sd_" +newt_mu_effect_sd+"_sigma_"+SD+ "_ID_"+seed + "_cost_" + setCOST + "_interaction_rate_" + interaction_rate + "_rep_"+rep + "_late_" + NUMGENS + "_.text"; // file name

	log = sim.createLogFile(mygridfile, logInterval=20);
	log.addGeneration();
	// loop for the different spaces in the grid 
	for (element in 0:(grid_val*grid_val_2-1)){
		// summarize_ind_num
		log.addCustomColumn(paste0("newt_num_ind_", element), paste0("summarize_ind_num(p1, grid_res_value=grid_val, index=", element, ", sanity='Newt num ind');"));
		log.addCustomColumn(paste0("snake_num_ind_", element), paste0("summarize_ind_num(p0, grid_res_value=grid_val, index=", element, ", sanity='Snake num ind');"));
		// summarize_max_pheno
		log.addCustomColumn(paste0("newt_max_pheno_", element), paste0("summarize_max_pheno(p1, grid_res_value=grid_val, index=", element, ", sanity='Newt max pheno');"));
		log.addCustomColumn(paste0("snake_max_pheno_", element), paste0("summarize_max_pheno(p0, grid_res_value=grid_val, index=", element, ", sanity='Snake max pheno');"));		
		// summarize_mean_pheno
		log.addCustomColumn(paste0("newt_mean_pheno_", element), paste0("summarize_mean_pheno(p1, grid_res_value=grid_val, index=", element, ", sanity='Newt mean pheno');"));
		log.addCustomColumn(paste0("snake_mean_pheno_", element), paste0("summarize_mean_pheno(p0, grid_res_value=grid_val, index=", element, ", sanity='Snake mean pheno');"));	
		// summarize_sd_pheno
				log.addCustomColumn(paste0("newt_sd_pheno_", element), paste0("summarize_sd_pheno(p1, grid_res_value=grid_val, index=", element, ", sanity='Newt sd pheno');"));
		log.addCustomColumn(paste0("snake_sd_pheno_", element), paste0("summarize_sd_pheno(p0, grid_res_value=grid_val, index=", element, ", sanity='Snake sd pheno');"));	
		// summarize_min_pheno
		log.addCustomColumn(paste0("newt_min_pheno_", element), paste0("summarize_min_pheno(p1, grid_res_value=grid_val, index=", element, ", sanity='Newt min pheno');"));
		log.addCustomColumn(paste0("snake_min_pheno_", element), paste0("summarize_min_pheno(p0, grid_res_value=grid_val, index=", element, ", sanity='Snake min pheno');"));	
	}
}

2 early(){

		// Cor Log file
mycorfile=outpath+tag+"_GA"+grid_val_2+grid_val+"_cor_"+"snake_mu_rate_"+snake_mu_rate+ "_newt_mu_rate_"+newt_mu_rate + "_snake_mu_effect_sd_"+ snake_mu_effect_sd +"_newt_mu_effect_sd_" +newt_mu_effect_sd+"_sigma_"+SD+ "_ID_"+seed + "_cost_" + setCOST + "_interaction_rate_" + interaction_rate + "_rep_"+rep + "_late_" + NUMGENS + "_.text"; // file name
	
		log_c = sim.createLogFile(mycorfile, logInterval=20);
		log_c.addGeneration();
		log_c.addCustomColumn("mean_newt_pheno_By_mean_snake_pheno","mean_newt_pheno_By_mean_snake_pheno;");
log_c.addCustomColumn("num_newts_By_num_snakes","num_newts_By_num_snakes;");
log_c.addCustomColumn("sum_newt_pheno_By_num_snake","sum_newt_pheno_By_num_snake;"); //
log_c.addCustomColumn("sum_snake_pheno_By_num_newt","sum_snake_pheno_By_num_newt;");
log_c.addCustomColumn("sum_newt_pheno_By_num_newt","sum_newt_pheno_By_num_newt;"); //
log_c.addCustomColumn("sum_snake_pheno_By_snake_newt","sum_snake_pheno_By_snake_newt;");

}


s99 10 late() {
	// outpath will need to be defined in the slim call so will the varables and ending time
	sim.treeSeqOutput(treename+tag+"_slim_trees_snake_mu_rate_"+snake_mu_rate+ "_newt_mu_rate_"+newt_mu_rate + "_snake_mu_effect_sd_"+ snake_mu_effect_sd +"_newt_mu_effect_sd_" +newt_mu_effect_sd+"_sigma_"+SD+ "_rep_"+rep + "_late_" + NUMGENS  + "_ID_" + seed + ".trees");
	sim.simulationFinished();
}
